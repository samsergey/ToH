<!DOCTYPE html>
<html>
    <head>
    <meta charset='UTF-8'/>
    <script src='../lib/d3.js'></script>
    <script src='../lib/analysis.js'></script>
    <script src='../lib/functions.js'></script>
    <script src='../lib/tools.js'></script>
    <script src='../lib/matrix.js'></script>
    <script src='../lib/statistics.js'></script>
    <script src='../lib/graphics.js'></script>
    <script src='../lib/signal.js'></script>
    <link rel="stylesheet" href="../css/styles.css">
    <style>
    .points {
	fill:indianred;
    }
    .curve {
	stroke:navy;
	stroke-dasharray:5,5;
    }
    .inner .points {
	stroke:none;
	fill:#F00;
	fill-opacity:0.075;
    }
    .outer .points {
	stroke:none;
	fill:darkgreen;
	fill-opacity:0.1;
    }
    .label {
	font-size: 100%;
    }
    .polarMesh {
	stroke: gray;
	stroke-width:0.5;
    }
    .wrapped {
	stroke: indianred;
	stroke-width:2;
	fill:orange;
	fill-opacity:0.2;
    }
</style>
  </head>
    <body>
    <svg id='fig1' width='500' height='500'></svg>
    <script>


var fig1 = d3.select("#fig1")

function normalFig1()
{
    new Graphics(fig1)
	.xRange([1,20])
	.yRange([0,1])
	.plot(x => (1 - Math.pow(0.85,x)),{'class':'curve'})
	.listPlot(range(1,21).map(x => (1 - Math.pow(0.85,x))),{
	    'pointSize':3,
	    'class':'points'})
	.axes({xTicks:20,
	       xLabel:'размерность пространства',
	       yLabel:'доля корки арбуза в общем объёме',
	       yTickFormat : fmt.percent
	      })
}

function normalFig2()
{
    new Graphics(fig1)
	.xRange([1,20])
	.yRange([0,1])
	.plot(x => (1 - Math.pow(0.64,x)))
	.listPlot(d3.range(1,20).map(n => Multispace2(n,1000,1)),{pointSize:3})
	.axes({})
}


function Multispace(m,n,s)
{
    h = new Histogram(1)
    range(n).forEach(() => h.add(isNormal(Normal(0,1).samples(m))))
    return h.PDF(1)
    
    function isNormal(v)
    {
	return v.every(x => x <= s) ? 0 : 1
    }
}

function Multispace2(m,n,s)
{
    h = new Histogram(1)
    range(n).forEach(() => h.add(isNormal(Normal(0,1).samples(m))))
    return h.PDF(1)
    
    function isNormal(v)
    {
	return (v.dot(v) < s*s) ? 0 : 1
    }
}


//normalFig2()

function angle(v1,v2)
{
    return 180/Math.PI*Math.acos(v1.dot(v2))
}

function normalize(v)
{
    var n = Math.sqrt(v.dot(v))
    return v.map(x => x / n)
}

function unitVector(m)
{
    return normalize(Normal(0,1).samples(m))
}


function angleHist(m,n)
{
    var h = new Histogram(180/40)
    var v = unitVector(m)
    d3.range(n).forEach(x => h.add(angle(v,unitVector(m))))
    return h    
}

function angleDistPDF(m)
{
    var A = gamma(m/2)/gamma((m-1)/2)/sqrt(pi) 
    return a => {
	if (a < 0) return angleDistPDF(m)(-a)
	if (a >= 180) return angleDistPDF(m)(a-180)
	return deg2rad(A*Math.pow(Math.sin(deg2rad(a)),m-2))
    }
}

function angleDistCDF(m)
{
    return a => integrate(angleDistPDF(m),[0,a])
}

function draw(m,n)
{
    new Graphics(fig1)
	.xRange([0,180])
	.histogram(angleHist(m,n),{type:'PDF'})
	.plot(angleDistPDF(m))
	.axes({})
}

function draw2()
{
    new Graphics(fig1)
	.xRange([0,180])
    	.yRange([0,1.5])
	.plot(angleDistPDF(2))
    	.plot(angleDistPDF(3),{domain:[0,180]})
        .plot(angleDistPDF(4))
        .plot(angleDistPDF(8))
        .plot(angleDistPDF(16))
	.axes({xLabel:'Угол между векторами',
	       yLabel:'Плотность вероятности',
	       xTickValues : d3.range(0,181,30)
	      })
    	.label('2',{at:[88,0.24]})
	.label('3',{at:[88,0.41]})
    	.label('4',{at:[88,0.66]})
    	.label('8',{at:[88,1.05]})
    	.label('16',{at:[86,1.55]})
}

//draw2(3)

function draw3()
{
    new Graphics(fig1)
	.xRange([-1.5,1.5])
    	.yRange([-1.5,1.5])
	.polarPlot(x => angleDistPDF(2)(x*180/Math.PI))
        .polarPlot(x => angleDistPDF(4)(x*180/Math.PI))
        .polarPlot(x => angleDistPDF(8)(x*180/Math.PI))
        .polarPlot(x => angleDistPDF(16)(x*180/Math.PI))
	.axes({})
}

//draw3()

function Quantiles()
{
    p = new Graphics(fig1)
	.xRange([2,11])
	.yAxisType('log')
	.yRange([1e-7,1e-1])
	.discretePlot(m => angleDistCDF(m)(15),[2,12])
    	.axes({xLabel:'размерность пространства',
	       yLabel:'доля сонаправленных векторов',
	       yTicks: false})
    range(1,7).forEach(n => p.label(10+sup(-n),{'at':[1,0.1**n]}).line([[2,0.1**n],[1.9,0.1**n]]))
}

//Quantiles()

function Normal2d()
{
    var n = 100000
    var xs = Normal(0,1).samples(n)
    var ys = Normal(0,1).samples(n)
    var pts = xs.zipWith(ys,(x,y)=>[x,y])
    inn = pts.filter(([x,y])=>x*x+y*y<2)
    out = pts.filter(([x,y])=>x*x+y*y>=2)
    return new Graphics(fig1,{})
	.xRange([-5,5])
	.yRange([-5,5])
	.listPlot(out,{'pointSize':1,"class":'outer'})
	.listPlot(inn,{'pointSize':1,"class":'inner'})
	.listPlot([[0,0],[1,1]],{'points':false,'joined':true})
	.label("σ",{'at':[0.6,0.3]})
}

//Normal2d()

function Cycling(distr,opts)
{
    opts = opts || {}
    var N = opts['winding'] || 10
    var a = opts['rmax'] || 0.26
    var  p = new Graphics(fig1)
	.xRange([-a,a])
    	.yRange([-a,a])
    range(0,a+a/10,a/10)
	.map(r => p.polarPlot(x=>r,{'class':'polarMesh'}))
    range(0,2*pi,pi/20)
	.map(phi => p.line([[0,0],[a*sin(phi),a*cos(phi)]],{'class':'polarMesh'}))
        
//    p.polarPlot(distr.PDF,{ 'domain':[-10*pi,10*pi],
//			    'plotPoints' : 3600})
    p.polarPlot(cycling(distr,N),{ 'class':'wrapped',
		    'plotPoints' : 360,
		    'domain':[-pi,pi],
		    'filled':true})
    range(0,360,45)
	.map(x => p.label(x+"°",{'at':[1.09*a*cos(deg2rad(x))-0.015,1.05*a*sin(deg2rad(x))-0.004]}))
}



//Cycling(Normal(0,6),{'rmax':0.19})
//Cycling(Exponential(1/6),{'winding':10})
//var gam = 2
//Cycling({'PDF': x => 1/(pi*gam)/(1+(x/gam)**2)},{'winding':1000,'rmax':0.25})
//Cycling(Pareto(1,1/10),{'winding':100})
</script>
  </body>
</html>
