<!DOCTYPE html>
<html>
    <head>
    <meta charset="UTF8">
    <script src='../lib/d3.js'></script>
    <script src='../lib/analysis.js'></script>
    <script src='../lib/functions.js'></script>
    <script src='../lib/tools.js'></script>
    <script src='../lib/matrix.js'></script>
    <script src='../lib/statistics.js'></script>
    <script src='../lib/graphics.js'></script>
    <script src='../lib/signal.js'></script>
    <script src='leela.js'></script>
    <link rel="stylesheet" href="../css/styles.css">
    <style>
    .life .A .line {
	stroke : navy;
	stroke-opacity : 0.5;
	stroke-width : 1.5;
        }
    .life .B .line {
	stroke : indianred;
	stroke-width : 2;
	stroke-width : 1.5;
        }
    .life .B1 .line {
	stroke : indianred;
	stroke-width : 2;
	stroke-opacity : 0.7;
        }
    .gridLines {
	stroke : blue;
	stroke-opacity:0.25;
    }
    .deadline .label {
	fill-opacity:1;
	stroke-width:0;
    }
    .above {
	stroke: none;
	fill: #E74C3C;
    }
    .below {
	stroke: none;
	fill: #2471A3;
    }
    .zero {
	stroke: black;
    }
    .year {
	stroke: blue;
	stroke-opacity:0.75;
    }
    .myear {
	stroke: blue;
	stroke-opacity:0.75;
	stroke-dasharray:5,5;
    }
    .month {
	stroke: darkred;
	stroke-opacity:0.75;
    }
    .mmonth {
	stroke: darkred;
	stroke-opacity:0.75;
	stroke-dasharray:5,5;
    }
    .week {
	stroke: darkgreen;
	fill: darkgreen;
    }
    .samples  {
	fill:#B00;
	stroke:white;
	stroke-opacity:0.5;
    }
    .halve1  {
	fill:pink;
	fill-opacity:0.5;
	stroke:black;
    }
    .halve2  {
	fill:palegreen;
	fill-opacity:0.5;
	stroke:black;
    }
    .leela {
	stroke : navy;
	stroke-opacity:0.01;
	stroke-width:0.3;
    }
    .matrixPlot .zeros {
	fill:gray;
    }
    .matrixPlot .positives {
	fill:navy;
    }

    .cycles .bar {
	fill:darkred;
	fill-opacity: 0.7;
    }
    .cycles .label {
	font-family:times;
	font-size:90%;
    }
    .polarMesh {
	stroke: gray;
	stroke-width:0.5;
    }
    .angular .line {
	fill:darkorange;
	stroke:red;
    }
    .stairs {
	stroke:darkorange;
	stroke-width:5;
    }
    .queue {
	stroke:navy;
	fill:navy;
	fill-opacity:0.5;
    }
</style>
  </head>
    <body>
    <svg id='fig1' width='500' height='300'></svg>
    <script>
    
var fig1 = d3.select("#fig1")


function insideQueue()
{
    q1=PoissonProcess(50/60).runToVal(20).map(([t,x])=>[t,20-x])
    q2=PoissonProcess(50/60).runToVal(20).map(([t,x])=>[t,20-x])
    new Graphics(fig1)
	.xRange([0,max(q1.last()[0],q2.last()[0])])
	.yRange([0,20])
	.listStairsPlot(q1,{'class':'year'})
    	.listStairsPlot(q2,{'class':'week'})
	.axes({xLabel:"время (минуты)",
	       yTicks:5,
	       yLabel:"длина очереди"})
}

//insideQueue()

function runQueue(d)
{
    var W = new Histogram(0.05)
    var B = new Histogram(0.05)
    var fst, t0 = 0, prevn = 0,i=0
    d.forEach(([t,q])=>{
	var n = q.length
	if (n == 1 && prevn == 0) b = t
	if (n == 0 && prevn == 1) { B.add(t-b); b = 0; }
	if (n > 0 && q[0].n>i) {i = q[0].n; W.add(q[0].o-q[0].i)}
	prevn = n
    })
    return [W,B]
}

function showQueue(d)
{
    var p = new Graphics(fig1)
	.xRange([0,d.last()[0]])
	.yRange([0,10])
	.axes({xLabel:"время (часы)",
	       yTicks:5,
	       yLabel:"длина очереди"})
    var col = n => ['orange','navy','navy','navy'][n % 4]
    for(i=0; i<d.length-1; i++)
    {
	t1 = d[i][0]
	t2 = d[i+1][0]
	d[i][1].forEach((c,j) => p.rectangle(t1,j,t2-t1,1,{'opacity':2*(c.o-c.i)}))
    }
}

//showQueue(MM1(10,14,0).runToTime(10))
//showQueue(MM1(10,15,1).runToTime(10))
//showQueue(MD1(10,13).runToTime(10))
//showQueue(MG1(10,toGamma(1/15,4/15/15)).runToTime(10))

function blat()
{
    var w,b
    pts= range(0,1.1,0.1).map(e => {
	console.log(e)
	return [e,runQueue(MM1(10,15,e).samples(10000))[0].mean]
    })
    new Graphics(fig1)
	.yRange([0,0.4])
	.listPlot(pts)
	.axes({})
}
//blat()

const Waiting = (l,m,x) => ((l/m+l*m*x*x/m/m)/(2*(m-l))+1/m)

const WaitingDL = (l,m,x) => l/m*(x^2 - 1)/2 + 1

function toGamma(m,v)
{
    return Gamma(m*m/v,m/v)
}

function queueTimes(l,m)
{
    var ws=[],bs=[],r=l/m
    new Graphics(fig1)
	.xRange([0,2])
    	.yRange([0,1.5])
	.plot(x => 1+r/2*(x-1))
	.axes({xLabel:"относительная вариация",
	       yLabel:"отношение B/W",
	       yTickValues : [0],
	       xTickValues:[0,1],
	       xTickFormat:fmt.int,
	       yTickFormat:fmt.int})
	.gridLines({y:[1]})
}

//queueTimes(10,15)

function queueTimes2(l,m,s)
{
    var f = x=>toGamma(1/m,s/m/m).PDF(x+0.5)+0.2/x
    new Graphics(fig1)
	.xRange([0.001,30])
	.yRange([0,0.2])
	.plot(x=>Exponential(l).PDF(x),{'class':'year'})
	.plot(x=>f(x),{'class':'month'})
	.axes({xLabel: "периоды времени (минуты)",
	       yLabel: "плотность вероятности",
	       yTicks: 5})
	.line([[1/l,0],[1/l,Exponential(l).PDF(1/l)]],{'class':'myear'})
	.line([[1/m,0],[1/m,f(1/m)]],{'class':'mmonth'})
}

//queueTimes2(10/60,15/60,9)

function queueTimes3(l,m,s)
{
    [w,b] = runQueue(MG1(l,toGamma(1/m,s/m/m),0.5).samples(10000))

    new Graphics(fig1)
	.histogram(w,{'type':'PDF'})
	.axes({})
    
}
//queueTimes3(10,12,1)
    </script>
  </body>
</html>
