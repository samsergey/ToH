<!DOCTYPE html>
<html>
    <head>
    <meta charset='UTF-8'/>
    <script src='../lib/d3.js'></script>
    <script src='../lib/analysis.js'></script>
    <script src='../lib/functions.js'></script>
    <script src='../lib/tools.js'></script>
    <script src='../lib/matrix.js'></script>
    <script src='../lib/statistics.js'></script>
    <script src='../lib/graphics.js'></script>
    <script src='../lib/signal.js'></script>
    <script src='../lib/odesolve.js'></script>
    <link rel="stylesheet" href="../css/styles.css">
    <style>
      .wealth .plot {
	  stroke-opacity:0.7;
      }
    </style>
    </head>
    <body>

    <script>
      function degenerate()
      {
	  var distr = createSVG('fig11')
	  new Graphics(distr)
	      .xRange([0,200])
	      .yRange([0,1])
	      .listPlot([[100,1]],{'needles':true})
	      .axes({yLabel : 'доля людей в группе',
		     xLabel : 'уровень богатства'})
	  var lor = createSVG('fig12',{'aspectRatio':1,'size':270})
	  new Graphics(lor,{'class' : 'Lorentz'})
	      .LorentzPlot([[0,0],[1,1]], {Gini : 0,
					   xLabel : 'доля участников группы',
					   yLabel : 'доля общей суммы'})
      }
//      degenerate()

      function poissonStrategy()
      {
	  f = Binomial(10000,1/100)
	  var lst = range(0,200,2).map(i=>[i,i>134?0:f.PMF(i)])
	  var distr = createSVG('fig21')
	  new Graphics(distr)
	      .xRange([0,200])
	      .listPlot(lst,{'needles':true})
	      .plot(Normal(100,100).PDF)
	      .axes({ yLabel : 'доля участников группы',
		      xLabel : 'уровень богатства'})
	  var lor = createSVG('fig22',{'aspectRatio':1,'size':270})
	  new Graphics(lor,{'class' : 'Lorentz'})
	      .LorentzPlot('empty', { Gini : 0.02,
				      xLabel : 'доля участников группы',
				      yLabel : 'доля общей суммы' })
	      .listLinePlot(f.LorentzCurve(range(60,130,1)),{'class':'lower','filled':true})
      }
//      poissonStrategy()

      function uniform()
      {
	  var distr = createSVG('fig31')
	  new Graphics(distr)
	      .xRange([0,210])
	      .yRange([0,1/150])
	      .plot(Uniform([0,200]).PDF,{'filled':true,plotPoints:400})
	      .axes({yLabel : 'доля участников группы',
		     xLabel : 'уровень богатства',
		     yTickValues : range(0,0.007,0.001),
		     yTickFormat : fmt.number
		    })
	  var lor = createSVG('fig32',{'aspectRatio':1,'size':270})
	  var h= new Histogram(2).fromDistribution(Uniform([0,100]),1000)
	  new Graphics(lor,{'class' : 'Lorentz'})
	      .LorentzPlot('empty',{ Gini : 0.33,
				     xLabel : 'доля участников группы',
				     yLabel : 'доля общей суммы' })
	      .plot(x=>x*x,{'class':'lower','filled':true})
      }
      //     uniform()

      function exchange(opts)
      {
	  var batch = opts["batch"] == undefined ? true : opts["batch"]
	  var alpha = opts["alpha"] || 0
	  var beta = opts["beta"] || 0
	  var minShare = opts["minShare"] || 0
	  var bound = opts["bound"] || 0
	  
	  return function (data)
	  {
	      function exch(i) {
		  if (data[i] >= 1)
		  {
		      d = minShare + floor(data[i]*alpha)
		      do {
			  j = randomInteger(data.length)()
			  df = d // max(min(d,minShare + floor(data[j]*beta)),1)
			  //if (bound > 0 && data[j]>=bound-df) continue
			  data[i]-=df
			  data[j]+=df
			  d-=df
		      } while (d > 0)
		  }
	      }
	      if (batch)
		  for(i=0;i<data.length;i++) exch(i)
	      else
		  exch(randomInteger(data.length)())
	      return data
	  }
      }

      function model1()
      {
	  var n = 5000, m = 100, b = 1, rep = 20
	  var strategy = exchange({'minShare':1})
	  var step = (k,p) => nest(strategy,p,k)
	  function histopts(c) {
	      return {'type':'PDF', 'class':'plot', 'filled':true, 'kind':'smooth'}
	  }
	  var fig = createSVG('fig3')
	  var hs = [new Histogram(1),new Histogram(b)
		    ,new Histogram(b),new Histogram(b)]
	  for(var i = 0; i<rep; i++)
	  {
	      var g = [m].repeat(n)
	      hs[0].fromList(g = step(1,g))
	      hs[1].fromList(g = step(8e2,g))
	      hs[2].fromList(g = step(2e3,g))
	      hs[3].fromList(g = step(1e5,g))
	      console.log(Math.round((i+1)/rep*100)+"%")
	  }
	  var p = new Graphics(fig,{'class':'wealth'})
	      .xRange([0,4*m])
	      .yRange([0,0.02])
	  range(0,4).forEach((c,i) => p.histogram(hs[i],histopts(c)))
	  p.plot(Exponential(1/m).PDF,{'class':'refference'})
	      .label('a',{'at':[110,0.019]})
	      .label('b',{'at':[130,0.01]})
	      .label('c',{'at':[170,0.004]})
	      .label('d',{'at':[30,0.008]})
	      .clipPaper()
	      .axes({xLabel:"уровень богатства",
		     yLabel:"плотность вероятности"})
      }
      // вычисляется долго
      //model1()

      function model1_entropy()
      {
	  var n = 5000, m = 100, b = 1, N=1e9, dN=pow(N,1/25)
	  var strategy = exchange({'minShare':1,'batch':false})
	  var fig = createSVG('fig3')
	  pts = []
	  var h
	  var g = [m].repeat(n)
	  for(var i = 1; i<=N; i*=dN) {
	      h = new Histogram(b).fromList(g)
	      pts.push([i, h.entropy])
	      g = nest(strategy,[m].repeat(n),i)
	  }
	  new Graphics(fig,)
	      .xRange([1,N])
	      .xAxisType('log')
	      .yRange([0,7])
	      .listLinePlot(pts)
	      .gridLines({'y':[1-ln(1/m)]})
	      .label('a',{'at':[100,0.35]})
	      .label('b',{'at':[5e3,1.7]})
	      .label('c',{'at':[5e6,5.1]})
	      .label('d',{'at':[1e8,pts[23][1]+0.25]})
	      .axes({xLabel:"число обменов",
		     yLabel:"энтропия распределения",
		     xTickValues:range(0,10).map(p=>10**p),
		     xTickFormat:fmt['pow10'],
		     yTickValues:range(0,8),
		     yTickFormat:fmt['int']})
      }
      // вычисляется долго
      //model1_entropy()


      function model1_temp()
      {
	  var fig = createSVG('fig3')
	  var p = new Graphics(fig)
	      .xRange([0,400])
	      .yRange([0,0.02])
	      .plot(Exponential(1/50).PDF)
	      .label("m=50",{'at':[50, 0.01]})
	      .plot(Exponential(1/200).PDF)
	      .label("m=200",{'at':[200, 0.0025]})
	      .clipPaper()
	      .axes({xLabel:"уровень богатства",
		     yLabel:"плотность вероятности"})
	  
      }
//      model1_temp()
////////////////////////////////////////////////////////////
      
      function model2()
      {
	  var n = 2000, m = 100, b = 1, rep = 10
	  var strategy = exchange({'minShare':1,'bound':2*m})
	  var step = (k,p) => nest(strategy,p,k)
	  function histopts(c) {
	      return {'type':'PDF', 'class':'plot', 'filled':true, 'kind':'smooth'}
	  }
	  var fig = createSVG('fig3')
	  var hs = [new Histogram(1),new Histogram(b)
		    ,new Histogram(b),new Histogram(b)]
	  for(var i = 0; i<rep; i++)
	  {
	      var g = [m].repeat(n)
	      hs[0].fromList(g = step(1,g))
	      hs[1].fromList(g = step(8e2,g))
	      hs[2].fromList(g = step(2e3,g))
	      hs[3].fromList(g = step(2e5,g))
	      console.log(Math.round((i+1)/rep*100)+"%")
	  }
	  var p = new Graphics(fig,{'class':'wealth'})
	      .xRange([0,3*m])
	      .yRange([0,0.02])
	  range(0,4).forEach((c,i) => p.histogram(hs[i],histopts(c)))
	  p.plot(Uniform([0,2*m]).PDF,{'class':'refference'})
	      .label('a',{'at':[110,0.019]})
	      .label('b',{'at':[130,0.01]})
	      .label('c',{'at':[120,0.008]})
	      .label('d',{'at':[30,0.006]})
	      .clipPaper()
	      .axes({xLabel:"уровень богатства",
		     yLabel:"плотность вероятности"})
      }
      // вычисляется долго
//      model2()

      function model2_entropy()
      {
	  var n = 5000, m = 100, b = 1, N=1e9, dN=pow(N,1/25)
	  var strategy = exchange({'minShare':1,'batch':false,'bound':2*m})
	  var fig = createSVG('fig3')
	  pts = []
	  var h
	  var g = [m].repeat(n)
	  for(var i = 1; i<=N; i*=dN) {
	      console.log(i/N*100)
	      h = new Histogram(b).fromList(g)
	      pts.push([i, h.entropy])
	      g = nest(strategy,[m].repeat(n),i)
	  }
	  new Graphics(fig,)
	      .xRange([1,N])
	      .xAxisType('log')
	      .yRange([0,7])
	      .listLinePlot(pts)
	      .gridLines({'y':[1-ln(1/m),ln(2*m)]})
	      .label('распределение Гиббса',{'at':[100,5.7]})
	      .axes({xLabel:"число обменов",
		     yLabel:"энтропия распределения",
		     xTickValues:range(0,10).map(p=>10**p),
		     xTickFormat:fmt['pow10'],
		     yTickValues:range(0,8),
		     yTickFormat:fmt['int']})
      }
      // вычисляется долго
//      model2_entropy()

////////////////////////////////////////////////////////////
      
      function model3()
      {
	  var n = 2000, m = 100, b1 = 2*m-m/2, b2 = 2*m+m/2, rep = 10
	  var strategy1 = exchange({'minShare':1,'bound':b1})
	  var strategy2 = exchange({'minShare':1,'bound':b2})
	  var step1 = (k,p) => nest(strategy1,p,k)
	  var step2 = (k,p) => nest(strategy2,p,k)
	  var histopts = {'type':'PDF', 'class':'plot', 'filled':true, 'kind':'smooth'}
	  var fig = createSVG('fig3')
	  hs1 = new Histogram(1)
	  hs2 = new Histogram(1)
	  for(var i = 0; i<rep; i++)
	  {
	      hs1.fromList(step1(1e4,[m].repeat(n)))
	      hs2.fromList(step2(1e4,[m].repeat(n)))
	      console.log(Math.round((i+1)/rep*100)+"%")
	  }
	  var p = new Graphics(fig,{'class':'wealth'})
	      .xRange([0,3*m])
	      .yRange([0,0.02])
	      .histogram(hs1,histopts)
	      .histogram(hs2,histopts)
	      .gridLines({x:[100]})
	      .plot(exact(b1,m),{'class':'refference','plotpoints':400})
	      .plot(exact(b2,m),{'class':'refference','domain':[0,250]})
	      .axes({xLabel:"уровень богатства",
		     yLabel:"плотность вероятности"})
      }
      // вычисляется долго
//      model3()

      function exact(b,m)
      {
	  f = x => exp(b/m*x)-(1+x)/(1+x*(1-b/m))
	  if (b > 2*m)
	      l = bisection(f, -0.6, -0.01,f=>f<0)[0]
	  else
	      l = bisection(f, 0.1, 1.5,f=>f<0)[0]
	  n = (exp(l*b/m)-1)/l
	  return x => (x >= 0 && x < b) ? exp(l*x/m)/n/m : 0
      }

      ////////////////////////////////////////////////////////////

      function model4(a)
      {
	  var m = 100
	  var fig = createSVG('fig3')
	  f = Gamma(1/a-1,1/m*(1/a-1))
	  hs = new Histogram(1).fromDistribution(f,20000)
	  var p = new Graphics(fig,{'class':'wealth'})
	      .xRange([0,4*m])
	      .yRange([0,0.015])
	      .histogram(hs,{'type':'PDF', 'class':'plot', 'filled':true, 'kind':'smooth'})
	      .plot(Gamma(1/a-1,1/m*(1/a-1)).PDF,{'class':'refference'})
	      .clipPaper()
	      .axes({xLabel:"уровень богатства",
		     yLabel:"плотность вероятности"})
      }
      //model4(0.25)

      function model42()
      {
	  var m = 100
	  var f = a => Gamma(1/a-1,1/m*(1/a-1)).PDF
	  var fig = createSVG('fig3')
	  var p = new Graphics(fig,{'class':'wealth'})
	      .xRange([0,4*m])
	      .yRange([0,0.015])
	      .plot(f(0.1)).label(0.1,{'at':[110,0.011]})
	      .plot(f(0.25)).label(0.25,{'at':[80,0.0084]})
	      .plot(f(0.5)).label(0.5,{'at':[70,0.0055]})
	      .plot(f(0.75)).label(0.75,{'at':[50,0.0014]})
	      .clipPaper()
	      .axes({xLabel:"уровень богатства",
		     yLabel:"плотность вероятности"})
      }
      //model42()

      function model43()
      {
	  var m = 100
	  f = a => Gamma(1/a-1,1/m*(1/a-1))
	  var pts = a => new Histogram(1).fromDistribution(f(a),10000).LorenzCurve
	  var fig = createSVG('fig3',{'aspectRatio':1,'size':270})
	  var p = new Graphics(fig,{'class':'Lorentz'})
	      .xRange([0,1])
	      .yRange([0,1])
	      .listLinePlot([[0,0],[1,1]],{'class':'lower','filled':true})
	      .listLinePlot(ps=f(0.08).LorentzCurve(range(0,200,1)))
	      .listLinePlot(ps=f(0.25).LorentzCurve(range(0,300,5)))
	      .listLinePlot(ps=f(0.5).LorentzCurve(range(0,600,5)))
	      .listLinePlot(ps=f(0.8).LorentzCurve(range(0,600,5)))
	      .label('0.1 (0.2)',{'at':[0.48,0.3],'angle':45})
	      .label('0.25 (0.3)',{'at':[0.52,0.22],'angle':45})
    	      .label('0.5 (0.5)',{'at':[0.62,0.18],'angle':45})
              .label('0.75 (0.7)',{'at':[0.74,0.07],'angle':45})
	      .axes({ xLabel : 'доля участников группы',
		      yLabel : 'доля общей суммы'})
      }
      model43()

      function model4_entropy()
      {
	  var n = 10000, m = 100, b = 1, N=1e6, steps=50, dN=pow(N,1/steps)
	  var strategy = exchange({'alpha':0.8,'batch':false})
	  var fig = createSVG('fig3')
	  pts = []
	  var h,j=0
	  var g = [m].repeat(n)
	  for(var i = 1; i<=N; i*=dN) {
	      console.log(floor(j++/steps*100)+"%")
	      h = new Histogram(b).fromList(g)
	      pts.push([i, h.entropy])
	      g = nest(strategy,[m].repeat(n),i)
	  }
	  new Graphics(fig)
	      .xRange([1,N])
	      .xAxisType('log')
	      .yRange([0,7])
	      .listLinePlot(pts)
	      .gridLines({'y':[1-ln(1/m)]})
	      .label('распределение Гиббса',{'at':[100,5.7]})
	      .axes({xLabel:"число обменов",
		     yLabel:"энтропия распределения",
		     xTickValues:range(0,10).map(p=>10**p),
		     xTickFormat:fmt['pow10'],
		     yTickValues:range(0,8),
		     yTickFormat:fmt['int']})
      }
      // вычисляется долго
      //model4_entropy()
/*
var vei = [[0.00001,1],[0.0001,1e-1],[0.001,1e-2],[0.01,1e-3],[0.1,1e-4],[1,1e-5],[10,1e-6],[100,1e-7],[1000,1e-8]]
*/

function multable(n)
{
    var r = range(1,n)
    return r.map(x => r.map(y => (x*y)%n == 0 ? 1 : 0))
}
//var fig = createSVG('fig1',{aspectRatio:1})

function rerun()
{
    new Graphics(fig)
	.cleanPaper()
	.matrixPlot(multable(Number(nn.value)))

}

    </script>
</html>
